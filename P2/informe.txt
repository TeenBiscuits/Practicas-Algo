ALGORITMOS - PR√ÅCTICA 2

Pablo Portas Lopez
Pablo M√≠guez Mu√≠√±o
Maite Liu Gonz√°lez V√°zquez

1) Contexto
En esta pr√°ctica se implementaron y compararon dos algoritmos de ordenaci√≥n: ordenaci√≥n por
inserci√≥n y ordenaci√≥n r√°pida (QuickSort). El objetivo fue analizar el rendimiento de estos
algoritmos midiendo los tiempos de ejecuci√≥n en tres configuraciones iniciales del vector: orden
ascendente, orden descendente y valores aleatorios. Se utilizaron cotas te√≥ricas n^1.8, n^2 y n^2.2
para comparar la eficiencia de los algoritmos.


2) Datos de la m√°quina
Modelo de hardware: HP Victus by HP Gaming Laptop 15-fa0xxx
Memoria: 16.0 GiB
Procesador: 12th Gen Intel¬Æ Core‚Ñ¢ i5-12500H √ó 16
Nombre del SO: Ubuntu 22.04.5 LTS
Versi√≥n del Kernel: 6.8.0-45-generic
Tipo de SO: 64 bits

Unidad de tiempo utilizada: micro segundos

3) Comprobaci√≥n de los algoritmos
Ordenaci√≥n por inserci√≥n y ordenaci√≥n r√°pida: Se realizaron pruebas de ordenaci√≥n en tres
configuraciones de inicializaci√≥n del vector: aleatoria, descendente y ascendente. A continuaci√≥n,
se muestran los resultados de estas pruebas para verificar la correcta implementaci√≥n de los algoritmos.

--- Test 1 | Ordenaci√≥n por inserci√≥n ---
Ordenaci√≥n con inicializaci√≥n aleatoria
-6 15 4 -6 -1 18 -18 12 -9 19 -7 19 -9 17 -4 17 15 14 -4 8
¬øOrdenado? 0
Ordenando...
-18 -9 -9 -7 -6 -6 -4 -4 -1 4 8 12 14 15 15 17 17 18 19 19
¬øOrdenado? 1
Ordenando...
Ordenaci√≥n con inicializaci√≥n descendente
20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1
¬øOrdenado? 0
Ordenando...
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
¬øOrdenado? 1


--- Test 2 | Ordenaci√≥n r√°pida ---
Ordenaci√≥n con inicializaci√≥n aleatoria
-6 15 4 -6 -1 18 -18 12 -9 19 -7 19 -9 17 -4 17 15 14 -4 8
¬øOrdenado? 0
Ordenando...
-18 -9 -9 -7 -6 -6 -4 -4 -1 4 8 12 14 15 15 17 17 18 19 19
¬øOrdenado? 1
Ordenando...
Ordenaci√≥n con inicializaci√≥n descendente
20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1
¬øOrdenado? 0
Ordenando...
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
¬øOrdenado? 1

4) Tablas de tiempos:

1. Presentaci√≥n de resultados de Ordenaci√≥n por inserci√≥n

Ordenaci√≥n por inserci√≥n con inicializaci√≥n aleatoria
n               t(n)     t(n)/n^1.8       t(n)/n^2     t(n)/n^2.2
  500          0.895 0.000012407293 0.000003580000 0.000001032973 (*)
 1000          1.774 0.000007062421 0.000001774000 0.000000445609 (*)
 2000       1349.000 0.001542261288 0.000337250000 0.000073747272
 4000       6464.000 0.002122234466 0.000404000000 0.000076907619
 8000      16643.000 0.001569168700 0.000260046875 0.000043095670
16000      67682.000 0.001832555831 0.000264382813 0.000038142506
32000     301090.000 0.002341134531 0.000294033203 0.000036928901

* tiempo promedio en 1000 ejecuciones del algoritmo

Ordenaci√≥n por inserci√≥n con inicializaci√≥n ascendente
n               t(n)     t(n)/n^1.8       t(n)/n^2     t(n)/n^2.2
  500          0.758 0.000010508076 0.000003032000 0.000000874853 (*)
 1000          1.931 0.000007687449 0.000001931000 0.000000485045 (*)
 2000          3.924 0.000004486163 0.000000981000 0.000000214518 (*)
 4000          6.808 0.000002235175 0.000000425500 0.000000081000 (*)
 8000         12.230 0.000001153093 0.000000191094 0.000000031669 (*)
16000         27.111 0.000000734057 0.000000105902 0.000000015279 (*)
32000         55.799 0.000000433867 0.000000054491 0.000000006844 (*)

* tiempo promedio en 1000 ejecuciones del algoritmo

Ordenaci√≥n por inserci√≥n con inicializaci√≥n descendente
n               t(n)     t(n)/n^1.8       t(n)/n^2     t(n)/n^2.2
  500          1.046 0.000014500590 0.000004184000 0.000001207251 (*)
 1000        720.000 0.002866371628 0.000720000000 0.000180855823
 2000       1902.000 0.002174485522 0.000475500000 0.000103978733
 4000       7744.000 0.002542478915 0.000484000000 0.000092136851
 8000      35037.000 0.003303428692 0.000547453125 0.000090725410
16000     133731.000 0.003620896602 0.000522386719 0.000075364727
32000     547098.000 0.004253977281 0.000534275391 0.000067101955

* tiempo promedio en 1000 ejecuciones del algoritmo



1.1 Observaciones

//Ordenaci√≥n por inserci√≥n con inicializaci√≥n aleatoria

-Crecimiento cuadr√°tico esperado: Los tiempos de ejecuci√≥n (t(n)) crecen significativamente a medida que aumenta
el tama√±o de entrada n, lo que coincide con la complejidad te√≥rica esperada del algoritmo de ordenaci√≥n
por inserci√≥n (ùëÇ(ùëõ^2)).

-Disminuci√≥n de las cotas a medida que aumenta n:
Para cotas te√≥ricas como ùë°(ùëõ)/ùëõ1.8t(n)/n 1 .8, ùë°(ùëõ)/ùëõ2t(n)/n 2 , y ùë°(ùëõ)/ùëõ2.2t(n)/n 2.2, se observa
que los valores disminuyen a medida que n aumenta. Esto es coherente con la complejidad del
algoritmo: a mayor tama√±o, los tiempos se ajustan m√°s a la complejidad cuadr√°tica ùëõ^2, lo que hace
que los cocientes se estabilicen en valores m√°s peque√±os.

alores extremos: El tiempo de 1349.000 microsegundos para n = 2000 es considerablemente m√°s alto que los
de n = 500 y n = 1000, lo que indica un comportamiento no lineal para los tama√±os peque√±os. Sin embargo, a partir
de n = 4000, el crecimiento de los tiempos parece m√°s consistente.

//Ordenaci√≥n por inserci√≥n con inicializaci√≥n ascendente

-Eficiencia m√°xima: Dado que el vector ya est√° ordenado, los tiempos son significativamente menores comparados
con la inicializaci√≥n aleatoria o descendente, lo que refleja el mejor caso para este algoritmo ùëÇ(ùëõ).
Este es el escenario ideal para la ordenaci√≥n por inserci√≥n.

-Estabilizaci√≥n r√°pida de las cotas: Las cotas t(n)/n^1.8, t(n)/n^2 y t(n)/n^2.2 son extremadamente peque√±as, mostrando
que el tiempo real de ejecuci√≥n es cercano a ùëÇ(ùëõ), como se esperar√≠a en el caso de una lista ya ordenada.

-Tiempo lineal: A medida que n aumenta, el tiempo de ejecuci√≥n sigue una tendencia casi lineal, lo cual es t√≠pico del
mejor caso para este algoritmo.

//Ordenaci√≥n por inserci√≥n con inicializaci√≥n descendente

El peor caso del algoritmo: Como se esperaba, este es el peor caso para la ordenaci√≥n por inserci√≥n, ya que el
algoritmo debe mover todos los elementos al principio del vector. El crecimiento en los tiempos es exponencialmente
mayor que en las otras dos inicializaciones.

Tiempos extremadamente largos para tama√±os grandes: Para n = 32000, el tiempo de ejecuci√≥n es de 547098 microsegundos, lo
que indica un crecimiento exponencialmente alto en comparaci√≥n con los otros casos. Esto es consistente con el peor
caso de ùëÇ(ùëõ^2), ya que el vector est√° en el orden completamente opuesto al que el algoritmo requiere.

Las cotas t(n)/n^2 y t(n)/n^2.2 son significativamente mayores en los otros casos de inicalizaci√≥n, lo que subraya la
ineficiencia del algoritmo para esta configuraci√≥n


2. Presentaci√≥n de resultados de Ordenaci√≥n r√°pida

Ordenaci√≥n r√°pida con inicializaci√≥n aleatoria
n               t(n)     t(n)/n^1.8       t(n)/n^2     t(n)/n^2.2
  500         52.754 0.000731323261 0.000211016000 0.000060886553 (*)
 1000         38.314 0.000152530781 0.000038314000 0.000009624042 (*)
 2000         85.701 0.000097978751 0.000021425250 0.000004685111 (*)
 4000        174.782 0.000057383723 0.000010923875 0.000002079528 (*)
 8000        729.000 0.000068733040 0.000011390625 0.000001887685
16000       1613.000 0.000043673540 0.000006300781 0.000000909014
32000       2834.000 0.000022035854 0.000002767578 0.000000347592

* tiempo promedio en 1000 ejecuciones del algoritmo

Ordenaci√≥n r√°pida con inicializaci√≥n ascendente
n               t(n)     t(n)/n^1.8       t(n)/n^2     t(n)/n^2.2
  500         18.326 0.000254051448 0.000073304000 0.000021151135 (*)
 1000         38.133 0.000151810207 0.000038133000 0.000009578577 (*)
 2000         83.024 0.000094918237 0.000020756000 0.000004538765 (*)
 4000        156.441 0.000051362080 0.000009777563 0.000001861310 (*)
 8000        326.122 0.000030748088 0.000005095656 0.000000844466 (*)
16000        729.000 0.000019738382 0.000002847656 0.000000410831
32000       1406.000 0.000010932396 0.000001373047 0.000000172447

* tiempo promedio en 1000 ejecuciones del algoritmo

Ordenaci√≥n r√°pida con inicializaci√≥n descendente
n               t(n)     t(n)/n^1.8       t(n)/n^2     t(n)/n^2.2
  500         16.147 0.000223844196 0.000064588000 0.000018636220 (*)
 1000         38.483 0.000153203582 0.000038483000 0.000009666493 (*)
 2000         85.716 0.000097995900 0.000021429000 0.000004685931 (*)
 4000        162.211 0.000053256463 0.000010138188 0.000001929960 (*)
 8000        334.261 0.000031515466 0.000005222828 0.000000865541 (*)
16000        513.000 0.000013889973 0.000002003906 0.000000289104
32000       1075.000 0.000008358695 0.000001049805 0.000000131850

* tiempo promedio en 1000 ejecuciones del algoritmo



2.1 Observaciones

//Ordenaci√≥n r√°pida con inicializaci√≥n aleatoria

Crecimiento subcuadr√°tico: A diferencia de la ordenaci√≥n por inserci√≥n, QuickSort muestra
un crecimiento mucho m√°s suave. Los tiempos de ejecuci√≥n ( t (n) ) aumentan de manera
subcuadr√°tica a medida que crece n, lo que es coherente con la complejidad promedio
esperada de O(n logn).

Estabilizaci√≥n de las cotas: Las cotas te√≥ricas t(n) /n^1.8, t(n)/n^2, y t(n) /n^2.2 disminuyen
gradualmente conforme n aumenta, lo que sugiere que el tiempo de ejecuci√≥n tiende a
seguir la curva de ùëÇ(ùëõ log ùëõ) en lugar de ùëÇ(ùëõ) . Esto es un indicador positivo de la
eficiencia de QuickSort en este escenario aleatorio

Comportamiento consistente: Desde n = 500 hasta n = 32000, se observa una reducci√≥n constante
en las cotas, lo que confirma que el algoritmo mantiene su eficiencia a lo largo de diferentes tama√±os de entrada.

//Ordenaci√≥n r√°pida con inicializaci√≥n ascendente


5) Conclusi√≥n


