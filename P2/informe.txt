ALGORITMOS - PRÁCTICA 2

Pablo Portas Lopez
Pablo Míguez Muíño
Maite Liu González Vázquez

1) Contexto
En esta práctica se implementaron y compararon dos algoritmos de ordenación: ordenación por
inserción y ordenación rápida (QuickSort). El objetivo fue analizar el rendimiento de estos
algoritmos midiendo los tiempos de ejecución en tres configuraciones iniciales del vector: orden
ascendente, orden descendente y valores aleatorios.


2) Datos de la máquina
Modelo de hardware: HP Victus by HP Gaming Laptop 15-fa0xxx
Memoria: 16.0 GiB
Procesador: 12th Gen Intel® Core™ i5-12500H × 16
Nombre del SO: Ubuntu 22.04.5 LTS
Versión del Kernel: 6.8.0-45-generic
Tipo de SO: 64 bits

Unidad de tiempo utilizada: micro segundos


3) Comprobación de los algoritmos
Ordenación por inserción y ordenación rápida: Se realizaron pruebas de ordenación en tres
configuraciones de inicialización del vector: aleatoria, descendente y ascendente. A continuación,
se muestran los resultados de estas pruebas para verificar la correcta implementación de los algoritmos.

--- Test 1 | Ordenación por inserción ---
Ordenación con inicialización aleatoria
[ 17 -1 -16 20 9 20 8 17 -14 -3 12 -8 17 2 8 0 18 18 -3 13 ]
¿Ordenado? 0 - Ordenando...
[ -16 -14 -8 -3 -3 -1 0 2 8 8 9 12 13 17 17 17 18 18 20 20 ]
¿Ordenado? 1
Ordenación con inicialización descendente
[ 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 ]
¿Ordenado? 0 - Ordenando...
[ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]
¿Ordenado? 1

--- Test 2 | Ordenación rápida ---
Ordenación con inicialización aleatoria
[ 17 -1 -16 20 9 20 8 17 -14 -3 12 -8 17 2 8 0 18 18 -3 13 ]
¿Ordenado? 0 - Ordenando...
[ -16 -14 -8 -3 -3 -1 0 2 8 8 9 12 13 17 17 17 18 18 20 20 ]
¿Ordenado? 1
Ordenación con inicialización descendente
[ 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 ]
¿Ordenado? 0 - Ordenando...
[ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]
¿Ordenado? 1


4) Tablas de tiempos:

4.1 Presentación de resultados de Ordenación por inserción

Ordenación por inserción con inicialización aleatorio
n                 t(n)         t(n)/n     t(n)/n^2.0     t(n)/n^2.5
(*)   500      136.792     0.27358400     0.00054717     0.00002447
(*)  1000      486.109     0.48610900     0.00048611     0.00001537
     2000     1899.000     0.94950000     0.00047475     0.00001062
     4000     7459.000     1.86475000     0.00046619     0.00000737
     8000    30330.000     3.79125000     0.00047391     0.00000530
    16000   123664.000     7.72900000     0.00048306     0.00000382
    32000   491716.000    15.36612500     0.00048019     0.00000268
                        cota subestimada cota ajustada cota sobreestimada
                                        cte: 0.00048734

Ordenación por inserción con inicialización descendente
n                 t(n)         t(n)/n     t(n)/n^2.0     t(n)/n^2.5
(*)   500      244.435     0.48887000     0.00097774     0.00004373
     1000      936.000     0.93600000     0.00093600     0.00002960
     2000     3785.000     1.89250000     0.00094625     0.00002116
     4000    15422.000     3.85550000     0.00096387     0.00001524
     8000    61386.000     7.67325000     0.00095916     0.00001072
    16000   245231.000    15.32693750     0.00095793     0.00000757
    32000   982801.000    30.71253125     0.00095977     0.00000537
                        cota subestimada cota ajustada cota sobreestimada
                                        cte: 0.00095724

(*) tiempo promedio en 1000 ejecuciones del algoritmo

Podemos observar que ante un vector desordenado, iniciado aleatoriamente, la ordenación por inserción
tiene una complejidad clara: Es cuadrática, con una constante clara que hemos indicado.
Desde el principio descartamos una complejidad lineal, y vemos como la cota va creciendo siendo esta
una cota subestimada. Por otro lado, si empleamos una cota superior, n^2.5 vemos como va descendiendo
la cota haciendo a esta una cota sobreestimada.

El análisis anterior es también aplicable a un vector inicializado descendentemente, donde vemos las mismas tendencias
y una cota ajustada con una constante mucho más clara.

Ordenación por inserción con inicialización ascendente
n                 t(n)    t(n)/log(n)         t(n)/n     t(n)/n^1.7
(*)   500        1.340     0.21562100     0.00268000     0.00003458
(*)  1000        2.637     0.38174485     0.00263700     0.00002095
(*)  2000        5.277     0.69425967     0.00263850     0.00001290
(*)  4000       10.462     1.26138623     0.00261550     0.00000787
(*)  8000       21.088     2.34644911     0.00263600     0.00000488
(*) 16000       40.870     4.22195740     0.00255437     0.00000291
(*) 32000       85.853     8.27619154     0.00268291     0.00000188
                        cota subestimada cota ajustada cota sobreestimada
                                        cte: 0.00263489

(*) tiempo promedio en 1000 ejecuciones del algoritmo

En este caso hemos tenido que cambiar las cotas. Cuando el algoritmo se enfrenta a un vector ya ordenado, su
rendimiento es mucho mayor, pasando de una complejidad cuadrática a una complejidad lineal. La cota ajustada tiende
una constante clara que así lo demuestra. Lo comparamos también con una complejidad logarítmica, aunque en vectores
pequeños (<2000) podría parecer constante, según el tamaño del vector crece es claro que esta es una cota subestimada.

Tratamos también de comprarlo con la cota ajustada de los otros escenarios, la cuadrática, pero sería una cota
muy sobreestimada, con una elevación de 1.7 ya vemos una sobreestimación clara.


4.2 Presentación de resultados de Ordenación rápida

Ordenación rápida con inicialización aleatorio
n                 t(n)    t(n)/log(n)  t(n)/(n*log(n))       t(n)/n^2
(*)   500       26.992        4.34332       0.00868663     0.00010797
(*)  1000       61.509        8.90441       0.00890441     0.00006151
(*)  2000      156.421       20.57921       0.01028961     0.00003911
(*)  4000      310.261       37.40763       0.00935191     0.00001939
     8000      676.000       75.21811       0.00940226     0.00001056
    16000     1097.000      113.32242       0.00708265     0.00000429
    32000     2428.000      234.05814       0.00731432     0.00000237
                         cota subestimada cota ajustada cota sobreestimada
                                         cte: 0.00871882

Ordenación rápida con inicialización descendente
n                 t(n)    t(n)/log(n)  t(n)/(n*log(n))       t(n)/n^2
(*)   500       14.496        2.33249       0.00466498     0.00005798
(*)  1000       29.235        4.23217       0.00423217     0.00002923
(*)  2000       61.600        8.10435       0.00405218     0.00001540
(*)  4000      136.068       16.40549       0.00410137     0.00000850
(*)  8000      301.504       33.54822       0.00419353     0.00000471
    16000      843.000       87.08368       0.00544273     0.00000329
    32000     1731.000      166.86764       0.00521461     0.00000169
                         cota subestimada cota ajustada cota sobreestimada
                                         cte: 0.00455736

(*) tiempo promedio en 1000 ejecuciones del algoritmo

En estos escenarios podemos ver el verdadero potencial de Quicksort, y es que, para un vector
inicializado aleatorio o descendente (ya ordenado) podemos afirmar con seguridad que tiene una
complejidad n logarítmica. Lejos está de ser cuadrática como inserción, es una cota claramente
sobreestimada. Mientras que un rendimiento logarítmico es una cota subestimada en sendos casos.

Ordenación rápida con inicialización ascendente
n                 t(n)    t(n)/log(n)           t(n)/n       t(n)/n^2
(*)   500       13.962        2.24665       0.02792408     0.00005585
(*)  1000       27.142        3.92919       0.02714186     0.00002714
(*)  2000       59.358        7.80929       0.02967882     0.00001484
(*)  4000      131.891       15.90190       0.03297278     0.00000824
(*)  8000      272.847       30.35954       0.03410589     0.00000426
    16000      526.000       54.33691       0.03287500     0.00000205
    32000     1032.000       99.48435       0.03225000     0.00000101
                         cota subestimada cota ajustada cota sobreestimada
                                           cte: 0.0325

(*) tiempo promedio en 1000 ejecuciones del algoritmo

El rendimiento cambia cuando este algoritmo se enfrenta a un vector inicializado en el orden contrario
al esperado. El rendimiento baja a una complejidad lineal con una constante que solo podemos apreciar
con unos valores de n grandes. La complejidad logarítmica sigue siendo una cota subestimada, aunque algo
menos que en los escenarios anteriores. Por otro lado, la complejidad cuadrática sigue siendo una cota
sobreestimada.


5) Conclusión

Quick sort parece ser el claro vencedor para la mayoría de escenarios "reales". Ya sea enfrentándose a un
vector en el orden inverso al esperado o desordenado (aleatoriamente) Quicksort tiene un rendimiento
imbatible. Más aún si se compara con un algoritmo cuyo rendimiento en estos escenarios es cuadrático.

Pero esto sería un análisis superficial si no mencionáramos que cuando nos enfrentamos a ordenar un vector
que ya está ordenado, una ordenación que queda en una mera comprobación, la ordenación por inserción brilla.
Donde QuickSort baja de un rendimiento n logarítmico a lineal, empatando con la ordenación por inserción que
mejora sus resultados en este escenario. Ordenación por inserción realiza estas ordenaciónes a más de x10 veces
el rendimiento de QuickSort.

QuickSort sigue haciendo honor a su nombre, siempre que no se enfrente a ordenaciones "redundantes".
